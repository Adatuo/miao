


DOM其他常用的属性或方法

innerHTML
  可以获取到某个标签内部的内容的html表示
  它也是可写的，可以通过这个属性方便的修改一个元素内部的html结构
  以往它的性能比较慢且只有ie浏览器支持所以书上没讲
  但现在它的性能已经非常好了，也标准化了，所以完全可以使用
  赋值时浏览器会解析给定的字符串并构建dom（可以通过火焰图看到）
outerHTML
  获取到元素自身的整个html表示
  其它同innerHTML
innerText
outerText
  它俩一样，之所以有两个是为了跟inner/outerHTML对称
  都可以获取到元素内的所有纯文字，不含标签
  它们跟textContent有何区别？
  textContent获取的字符串不受css的影响，直接就是原始文本结点的文本内容的拼接
  innerText获取到的内容受css影响，如多个连续空格会只剩一个
  以上两级属性其实都是getter/setter
children
  所有的元素子结点，不包含文本子结点和注释子结点
className
classList
  可以通过这个接口更方便的操作类名列表
  add
  remove
  toggle
  contains
  很像集合操作，因为类名就是集合（不重复）
dataset
  可以通过这个接口方便的操作标签的data-属性
cloneNode(deep?)
  复制这个结点
  传入true可以深层次复制
closest(selector)
  返回当前结点的祖先中满足选择器的最近祖先
append(...nodes)
  可以向元素增加结点或直接增加字符串
  可以一次性增加多个
  比appendChild更方便
prepend()
contains(node)
  判断当前结点是否包含其它结点（node）
matches(selector)
  判断结点是否满足选择器
normalize()
  将元素内的连续文本子结点合成一个
getClientRects()
  获取元素生成的多个矩形框的大小及位置（相对于视口）
getAttributeNames（）
  获取元素的所有attribute的名字组成的数组，方便操作所有属性
scrollBy/To
  设置元素内容的滚动位置
querySelectorAll('')
  会把每个'',都找出来,返回一个数组  .fire(class) #fire(ID)  

getBoundingClientRect()
  获得元素相对于视口的位置.返回值是一个 DOMRect 对象，是包含整个元素的最小矩形（包括 padding 和 border-width）
  围住这个元素区域所有的最小矩形
getclientRects()
  获得元素的矩形区域,一般用于行内元素  


parseFloat

e.target.closest('')
  获取e.target元素祖先中离它最近的满足这个选择器的元素

createElement('')
  创建元素  

getElementById()
  根据ID找到元素  

clearInterval()  //典中点操作见康威生命游戏
消先前通过 setInterval() 设置的重复定时任务。
  clearInterval(intervalID)

setInterval()
  重复调用一个函数或执行一个代码片段，在每次调用之间具有固定的时间间隔。
  var intervalID = setInterval(myCallback, 500, "Parameter 1", "Parameter 2");

  function myCallback(a, b) {
    // Your code here
    // Parameters are purely optional.
    console.log(a);
    console.log(b);
  }

parentElement 获得文档DOM的前一个元素

removeChild() 用于从某个父节点中移除它的子节点。限制：你必须通过父元素来调用这个方法，并且需要明确指出要删除的子节点。

remove() 直接从 DOM 中移除当前元素。由于不用找父节点,会直接从 DOM 中移除当前所有元素。