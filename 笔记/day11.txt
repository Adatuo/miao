  * 选择器组合
    * 同时满多个条件的元素才被选中
    * div#foo.bar.baz[title^="baa"]
    * 注意连接时中间是没有空格的
  * 与文档结构有关的选择器组合
    * 以下示例中A或B可以代表一个组合选择器即可能是p也可能是.foo也可能是p.foo#bar[attr]
    * 后代选择器
      * A B {}
        * 满足条件A的元素里面满足条件B的元素
    * 子元素选择器
      * A > B {}
        * 满足条件A的元素的子元素中满足条件B的元素
    * 毗邻选择器
      * A + B {}
        * 满足条件A的元素内后面满足条件B的元素
    * 兄弟选择器
      * A ~ B {}
        * 满足条件A的元素后续兄弟中满足条件B的元素
    * A, B {xxx} 选中A选择器与B选择器选中的元素的并集
      * 等价于
      * A {xxx} B {XXX}

  * 伪类选择器(通过隐含的信息来选中元素)
    * 交互伪类
      * :hover 鼠标悬浮的元素
      * :active 鼠标按下去(还没松手)的元素
      * :focus 焦点所在元素
    * 链接伪类
      * :link 所的未访问过的链接(注意a标签不一定是链接,只有有href属性的a标签才是链接)
      * :visited 所的已访问过的链接
    * 隐含条件伪类
      * :first-child 匹配任何元素的第一个子元素
      * :last-child 匹配任何元素的最后一个子元素
      * :nth-child(odd/even/3n+5)
      * :nth-last-child(odd/even/3n+5)
      * :empty 选中内容为空的元素,元素之间连空格都不能有,只能有一对空标签
      * :not(条件) 选中不满"条件"的元素
    * 表单交互伪类
      * input:not(:checked)  input:checked
      * :checked 选中被checked的元素 <input  type="checkbox">
      * :enabled 选中被启用的表单元素
      * :disabled 选中被禁用的表单元素
        * :not(:disabled) 选中被禁用的表单元素以外的所有元素
      * :valid/:invalid 选中填写正确/不正确的表单元素
      * :required/:optional 选中必须填写的/可选填写的表单元素
  * 选择器的优先级
    ```
    选择器的优先级是一个由四个数字组成的四元组(也有地方说是三元组)(即四个信息放在一块组成的一个整体)

    这个四元组是可以比较大小的
    如何比较?
    从两个四元组的第一个元素开始比较,如相同就比较下一对,如果不同就出结果了
    (1,2,3,1)
    (1,5,9,9)

    如何通过一个选择器得到表示其优先级的四元组?

    ```
    * 当两个不同的选择器选中同一个元素时,但设置的样式不一样,哪个生效呢?
    * 取决于选择器的优先级
    * 优先级的定义，四个数(四元组,也有说三元组的)
      * (0，4，4，29)
    * 不同类型的选择器会在这个四元组的不同位置上加一
    * 选择器的连接符不记如优先级的计算
      * A B {} 与 A > B {} 优先级一样
    * *{}选择器的优先级为(0,0,0,0)
    * 继承来的样式没有优先级
      * 没有优先级与(0,0,0,0)是不一样的,它比(0,0,0,0)还要低
    * !important
      * 有!important的永远比没有!important的优先级高
        * 都有!important的就比较选择器的优先级

  * 层叠样式
    * 用户自定义important样式
    * 网站作者important样式 authored style
    * 网站作者作者普通样式
    * 用户自定义普通样式 Custom.css
    * 默认样式，浏览器内置样式，User Agent Style
    * 优先级一样的话，按出现的顺序排列，后出现的优先级更高
      * 所以是 link visited focus hover active
      * :link:hover /0 0 2 0/
      * 不过在这几个伪类上分别写完全不同的属性时，顺序就不重要了
      * 重要的是写相同的属性，这时就要考虑优先级的问题了
      * LV HA  VL HA 没有太大区别，因为很明显，V和L不会同时匹配
    * 不来自CSS的样式
      * 如font标签的html属性带来的样式 <font size color face></font>
        * 可以想象它的优先级为0000并且出现在作者样式的开头(所以比继承来的要高)
        * 会被作者样式和读者样式覆盖，但不会被默认样式覆盖
        * p75页
      * <font color="red">aa</font>
      * <style>* {color: green;}</style>

