* 浮动布局
  * 浮动是一种外部布局，即它决定的是元素自己的位置，而是其内的元素如何摆放
    * 相比之下，table就属于内部布局
    * 定位是一种外部布局
    * grid、flex都属于内部布局
  * 浮动元素同时处于常规流内与常规流外
    * 即有些元素能感知到它而有些元素感知不到它
      * 块元素感知不到它
      * 行内元素能够感知到它(在块元素里面的元素也能感知)
      * **可以通过一些手段让它能感知到**
        * 什么手段?
  * 浮动元素无需设置display:inline-block等，行内元素浮动时自动变为块框
    * 此时display只改变元素元素的内部布局
    * 外部布局由浮动来决定
  * 浮动这个词如何理解？
  * 浮动与定位一起使用
    * 支持相对定位
      * 相对定位是相对于浮动之后的位置去偏移
    * 不支持与绝对和固定定位一起使用
      * 一起使用时定位优先,完全脱离常规流
  * float:left/right/none;  触发浮动
  * 浮动元素的包含块：同块元素，即最近的块级祖先框
  * 浮动元素的摆放
    * 左浮动不能在左边超出,右浮动不能在右边超出
    * 不能超过其原始包含块的高度
    * 不能超过其原始所在行框
    * 不能高过其包含块
    * 不能高过其前面的块元素的底部
    * 不能高过它前面的浮动元素
    * 不重叠>高>两边
  * 浮动元素的负margin
    * 布局框不是可视区域,而是margin-box
  * 浮动元素与其它元素的覆盖关系
    * 行内盖浮动
    * 浮动盖块级
    * 定位的在最上面（不设置z-index的情况下）
    * 同类型后面盖前面
  * 清除浮动
    * 元素下移以避开相应方向上的浮动元素
    * clear: left/right/both/none;
    * 只能用在块框上（浮动元素也可以用）
  * 闭合浮动
    * 元素变大(往往是变高)以包裹其内的所有浮动元素以避免影响其它元素
    * 一般通过触发bfc实现
      * overflow: hidden;
      * display: flow-root;
      * float: left; 一般不使用这种办法，因为它会让该自身也浮动，又带了其包含需要闭合浮动的问题
    * 也可以借助清除浮动实现
      * 在需要闭合浮动的元素最后加一个块元素并且清除该块元素的浮动，该块元素下移就会撑大需要闭合浮动的元素
  * 浮动的一般应用
    * 横向布局（类似行内块）
      * 没有行内的那些间隙了，但又有新的问题，浮动的闭合
    * 左边（或左右）定宽，右边占据剩余空间
      * 触发bfc的元素是通过变窄（在宽度为auto的情况下）来避开外部浮动元素对其内部的影响的
        * 不能变窄时，类似于clearr:both;，即下移
    * 一些常见的布局（小米产品列表，instagram等）

  * 什么时候后面的元素能影响前面的元素？