  * ```css
    ==行内元素的布局==
    
    * 行内元素有目前两种:inline,inline-block,inline-xxx
    * 行内元素(注意是inline不是inline-block)的垂直布局时是不考虑垂直height,padding,border和margin的，height无效，其它此时只起到装饰作用
      * 水平方向上的属性除width则都具有正常的布局效果
    * 行内元素的布局模式:
      * 先确定每个元素的布局框，然后一个个元素横向排列，空间不够就折行
      * 可以通过vertical-align属性微调元素在那一行的垂直位置
    * 行内布局的基本术语
      * 匿名文本（可以认为匿名文本是按行被行内标签包裹的）
        * 直接被块级标签包裹的文字
        * 或者说没有直接被行内元素（inline）包裹的文字
      * em框(字号框)
        * 其高度由font-size决定
      * 内容区(多个字的框组成的)，content area
        * 注意不是指content-box
      * 行间距
        * 其值的大小是行高减去字号
      * **行内框**
        * 行内布局最重要的就是确定元素的行内框
        * 行内框即是每个行内元素（包括行内块元素）的布局框
      * **行框**
        * 包裹那一行所有行内框的最小框
      * 基线
        * 实际上是文字才有的概念，其它元素没有
        * 贴着字母x底部的那条线
        * 跟em框的相对位置是取决于字体的，不同字体是不一样的
    * 行内布局的过程:
      * 确定每个行内元素的布局框（即行内框）
        * 对于匿名文本,就是其行高(line-height)框,注意不是字号!
          * 字号框是在行高框里垂直居中的
        * 对于被行内元素包裹的文字,也是行高,注意不是字号!
        * 对于行内替换元素（img, button, inline-block),是其margin-box
        * 对于行内块元素,是其margin-box
      * line-height属性用于设置行高，设置在块元素上也是对其内的文字生效
        * 可以指定百分比，px，em，纯数值等，百分比和纯数值时是相对于字号的
        * 默认值为normal，也不是一个固定值，而由字体决定，不同的字体最终生效的值不一样，一般在1.1到1.3之间
      * 然后将元素水平排列,让它们所有的基线对齐
      * 然后在垂直方向上微调,基于vertical-align的值，这个属性只能给到**行内元素**，给块元素没有效果，而是会对其内的行内元素生效（后续表单元格也可以给）
        * baseline 默认值
          * 该元素的基线与该行匿名文本的基线对齐
        * super
          * 元素向上移动一定的距离，具体是多少，没说
        * sub
          * 元素向下移动一定的距离，具体是多少，没说
        * top 元素的行内框顶部对齐行框顶部
        * bottom 元素的行内框底部对齐行框底部
        * middle 行内框中心对齐匿名文本x的中心,并一定是在行框中居中
          * 但如果匿名文本的x中心正好在行框的中心就是了,如匿名文本的字号为0时
        * text-top 底部对齐匿名文本em框顶部
        * text-bottom 底部对齐匿名文本em框底部
          * 实际上以前并不是实测结果
          * 实测结果是对齐行高为normal时文字的布局框的上下
        * 百分比
          * 基于行高的，正值向上，负值向下
        * 长度值
          * 正值向上，负值向下
      * 然后包裹一行中所有元素的最小框即为**行框**
      * 每一行都是如此
      * 所有的行框垂直堆叠之后将包含块撑大
    
    * 行内块元素
      * 元素自己的位置相当于是行内布局,此时把该元素当成一个图片就好了,不用考虑里面
      * 元素里面的内容认为自己在一个块元素里
        * 也就是说它是它内部元素的包含块
      * 另一个说法是:从外面看是行内元素,或类似于行内替换元素,从里面看是块元素
      * 行内块元素是有盒模型的，可以设置宽高，在行内的布局块也是margin-box
    * 一些需要说明的情况
      * 行内元素的底色框是由什么决定的?
        * 是由默认行高决定的,我们改不了,除非把它改成inline-block元素
        * 它不是元素的布局框
        * 如果不通过padding，border则我们无法单独改变它的高度
        * 文字的选区色块也不能做为任何参考
      * 不存在的字符,只要行存在（行里有内容行就会存在）,那一行就会存在一个匿名文本（只是它不会画再来），所以行高至少也是设置的line-height的值而不是那一行**实际存在**的最小元素
      * 虽然文字的布局框是基于行高的,但其基线是基于字号和字体的
      * 行内块元素的基线
        * 有文字时是最后一行文字的底部,但触发BFC后是布局框底部
        * 没有文字时是布局框(margin-box)的底部
        * 所以如果注意就会造成布局看起来很乱的情况
          * 需要将行内块元素的基线“调整”到其底部，通过触发它的BFC
      * 布局时空间不够肯定是会折行的,就算那一行只少一个像素,也会造成内容的折行
      * 字号大小不一样时由于默认是基线对齐，即使行高相同，文字也对不齐，因为字号的不同导致基线在布局框的不同位置
        * 缩放行高问题，即行高使用纯数值声明，这样一来继承的是书写值而非计算值
      * 空格的问题以及如何消除
      * 垂直绝对居中的问题
        * 让匿名文本字号为零，或者让那一行不存在匿名文本
    ```
    
    