# css

## html自带样式

* * html默认几乎没有什么样式
    * 古老的html中可以通过增加一些属性来增加一点有限的样式
      *
        ```html
        <body link="aqua"
              a(ctive)link="red"
              v(isited)link="grey"
              background="bg.jpg"
              bgcolor="yellow"
              leftmargin="10%"
              bottommargin="100"
              text="green">
        ```
    
  * 但这种做法能控制的样式非常少
    * 而且如果想把某个样式给到多个元素，要重复写
    
  * 不能使用各种长度单位
  
  * 总之从各种角度来说都比较原始
  
  * 而css能解决上面的所有问题(CSS To The Rescue)
    * 虽然解决了上面的问题,但是它也带来了新的问题
      * 由于样式控制更细，必然也更难，所以不太好学
      * 不好维护，所以有各种方案的尝试(BEM,Tailwind,scoped)
        * 什么叫好不好维护/可维护性？
          * 也就是易修改性
      * 所以说，**没有银弹(No Silver Bullet)**，不可能三角
      
## CCS样式

### CSS 全称 Cascade Style Sheet，层叠样式表
  
  * 更多类型的样式
  * 更复杂且灵活的布局
  * Desgined for UI(User Interface)，专为UI开发设计
  * 层叠，继承
  * 为未来设计（未来的浏览器都支持）
  
### CSS初探
  
  * 想要让页面中所有的段落（p）设置为红色并且字号为24像素
    ```css
      p {
        color: red;
        font-size: 24px;
      }
    ```
    
  * 上面的代码可以细拆为:
  
  * 选择器，规则块，单条规则，属性名，属性值
  
  * 元素（即html标签）的层级关系
    * 父子
    * 兄弟
    * 后代与祖先
    
  * 替换元素与非替换元素 replaced element vs non-replaced element
    * img, input, video, audio, iframe, canvas替换元素,元素本身只是占位的
      * 实际内容是换成了其它的东西
      * 展示时,替换元素的内部不再有其它元素了
    * p, div, span, strong 等普通元素,里面只有文字,即为非替换元素
      * 非替换元素的展示无需下载资源,所有的要素都在标签之间
    
  * 元素的显示角色(原话叫角色,可能翻译为"显示方式"会更合适)(不是role与aria-*里的这个role)
    * 块级元素，独占一行
    * 行内元素
    * 可以通过display属性改变元素的显示方式(布局方式)
      * 实际上元素的显示方式远不止上面这两个了
    
### 如何让css在html元素上生效
    
    * style标签
      * `<style>p {color:red;}</style>`
    * link标签
      * `<link rel="stylesheet" href="print.css">`
    * 内联样式
      * `<div style="color:red;font-size:45px;"></div>`
    
#### css代码的注释
    
    * /* ... */, 快捷键Ctrl + /, 但这种注释在内联样式中不太好写
    * css虽然只支持这一种注释风格，但是利用css的解析规则，我们可以有很多方式注释它
      * 如果这一行解析不成功，浏览器会直接忽略它
      * 所以以任意破坏这一行的内容开头就可以了
        * `//color:red;`
        * `colors: red;`
    
### 选择器
    
#### 基本规则
      
      * span,a ｛
        声明/属性:值;
        color: red;
        font-size: 24px;
        margin: red;
        ｝声明块
      * selector {
        prop:value;
        prop1:value1;}
      * 对应书本图片：p24页
    
#### 声明与关键词
    
    * 声明中的属性必须是css所支持的属性，否则将会被浏览器忽略
    ```css
      div {
        center: yes;
        center: yes;
        颜色: 高级黑;
        color: 100;
        colour: red;
        font-size: red;
        font-size: red;
        font-is-large: true;
      }
    ```
    * 声明的值也必须是**对应属性所支持的**，否则整条声明同样是无效的
    * DevTools 中可以看到以下提示
        * unknown property
        * invalid value
    
#### 各种选择器
    
##### 标签/元素选择器 element selector
      
      * `element {rules}`
      * div {}  p {} span {}  abc {}
      * * {color: red;}
      * <div></div>
      * <abc></abc>
##### 类选择器与id选择器
      
      * <div class="foo error def ghi"></div>
      * <p class="foo error "></p>


##### 类选择器
        
        * div.foo
        * .foo
        * .foo.error.ghi
        * .foo
        * *::selection
        * *:target
        * 简写为   .classname
###### 复合 类选择器
          
          * p.class1.class2
            * <p class="class1 class2 lsdkfj lksdfj"></p>
          * p.a.a {color: red;}
          * p.a {color: blue;}
          * ie7之前不支持这种
            * 只会有最后一个类生效
              * p.a.b 相当于 p.b ; p35页
              *
              
###### id选择器
          
          * <p id="thep"> </p>
          * #thep {color: red;}
          * #th#ep
          * [id="th ep"]
          * 不存在复合id选择器。。。因为一个元素只能有一个id
          * 而且id选择器是不按空格分隔的
          * p.a.b.c#foo
          * #thevalueofid {a:b;}
          * p,P {color:red;}
          * span {color:yellow}
          
        * **用id还是用class选择器**
          * id是一次性的，只出现一次
          * class是多处可用，可以复用的
          * 另外id选择器是不支持空格分隔的id列表的，不像class，p36页
          * id选择器优先级更高
          * 大小写敏感的，.p,.P是不一样的。但有些老浏览器不敏感
          * #p,#P
          * .error {color:red;}
###### 属性选择器
        * 7种属性选择器
        * 存在某属性
          * [attr] {}
        * 存在多个属性，chaining
          * p[attr1][attr2]
          * [attr1][attr2]
        * 属性名与值同时匹配
          * p[attr="abc"]
          * p[class="abc def"] vs p.abc 不一样 p41页
          * .class2 .class2 {
          * }
        * 空格分隔的属性值列表
          * [attr~="abc"]
          * .abc == [class~="abc"]
          * 这个有什么作用呢？它可以用在任何属性上面而不是只在class属性上面
        * 属性值不区分大小写
          * <a href=".PDF"></a>
          * [attr~="abc" i], case insenstive
          * .a.b {}
          * [class~="a"][class~="b"] {}
        * 值以指定内容开头
          * [attr^="abc"] caret
          * 应用：为所有email链接加上特定的样式
          * a[href^="mailto:"]
          * a[href^="tel:"]
          * a[href$=".doc"i]
        * 值以指定内容结束
          * [attr$='abc']
          * 应用：为所有不同类型的下载链接加上不同的样式，如pdf文件加上其对应的图标
        * 值的任何位置包含指定内容
          * [href*='.google.'] {color: red;}
          * <a href="http://www.baidu.com/l.google.akdf/adsfal"></a>
          * 应用：选择某个域名的链接；不过强度不够，因为无法保证链接的其它部分不出现host中的内容。


###### 属性值前缀选择器
          * [lang|='zh']
          * 选择attr值 为abc 或者 以“abc-”开头 的元素
          * [lang|="zh"]
          * 应用：选择语言：<html lang="en"><html lang="en-US">
          * p43页
        * 让属性值不区分大小写,在方括号结束前加一个i [role="foo" i]
      ```
        /* 选中有href属性的所有元素 */
        [role] {
          border: 8px solid red;
        }
      
        /* 选中role属性为banner的所有元素 i大小写*/
        [role="banner" i] {
          background-color: tan;
        }
      
        [lang="en-us" i] {
      
        }
      
        /* 选中role属性的值以ba开头的元素 */
        [role^="ba"] {
      
        }
        /* 选中role属性的值以ba开头的元素 */
        [role$="ba"] {
      
        }
      
        /* 选中role属性中间出现过ba的元素 */
        [role*="cat"] {
      
        }
      
        /* 选中role属性中有cat这个单词的元素 */
        [role~="cat"] {
      
        }
      
        /* 选中role属性是cat或以cat-开头,其实是用来做语言选择器的 */
        [role|="en"] {
      
        }
      ```
    * 选择器的作业
        * 给定一个文档，用不同的选择器实现不同的位置的文字样子不一样。。。
    
  * 选择器组合
    * 同时满多个条件的元素才被选中
    * div#foo.bar.baz[title^="baa"]
    * 注意连接时中间是没有空格的
    
  * 与文档结构有关的选择器组合
    * 后代选择器
      * A B {}
        * 满足条件A的元素内满足条件B的元素
    * 子元素选择器
      * A > B {}
        * 满足条件A的元素的子元素中满足条件B的元素
    * 毗邻选择器
      * A + B {}
        * 满足条件A的元素内后面满足条件B的元素
    * 兄弟选择器
      * A ~ B {}
        * 满足条件A的元素后续兄弟中满足条件B的元素
  
  * 伪类选择器(通过隐含的信息来选中元素)
    * 交互伪类
      * :hover 鼠标悬浮的元素
      * :focus 焦点所在元素
      * :active 鼠标按下去(还没松手)的元素
    * 链接伪类
      * :link 所的未访问过的链接(注意a标签不一定是链接,只有有href属性的a标签才是链接)
      * :visited 所的已访问过的链接
    * 隐含条件伪类
      * :first-child
      * :last-child
      * :nth-child(odd/even/3n+5)
      * :not()
      * :empty
    * 表单交互伪类
      * :checked
      * :enabled
      * :disabled
      * :valid/:invalid
      * :required/:optional