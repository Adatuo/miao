* 二进制竖式加法

* 计算机为什么要使用二进制?
  * 一个原因是误差（也有其它原因）
  * 为什么是二进制而不是三进制或其它进制呢？
    * 二进制足够简单
    * 二进制足够使用
    * 数学中的已经存在的理论基础：布尔代数为基础 命题逻辑
  * 二进制真的够用吗？
  * 比特，字节，字，双字,  K, M,G,T,P
  * bit, byte, word, dword,KB,MB,GB,TB,PB
  * 数字信号 与 模拟信号
  * 模拟信号：把设备里读出来的物理量直接使用
    * 适合远距离传输
  * 数字信号：如果把模拟信号的大小/高低/强弱按01来理解，就是数字信号
    * 适合近距离传输
  * Modem 调制 解调 器 就是做这种信号之间转换的（光纤 调制 解调 器）
    * 传统猫
    * 光猫

* 编码
  * 数值的表示（先略）
  * 文字的表示与编码
    * ascii
    * eascii
    * GB2312/GBK 国标&国标扩展码
    * unicode 万国码,只是为全球每个国家的每个字符指定了唯一编号
  * 图片的表示以及图片格式介绍
    * 计算机中颜色的表示
      * RRGGBB
    * bmp
    * png比较适合存储屏幕截图,无损压缩,支持256级的透明
    * jpg比较适合存现实世界的照片(颜色是渐变的),有损压缩,肉眼一般看不出来
      * 可以想象,各种图片格式的文件头(也就是文件最前面的一些字节)都会直接保存图片的分辨率
      * 不支持透明
    * gif
      * 动图,gif图片往往尺寸比较小
      * 每张图只有256种颜色
      * 支持两级透明
      * 但是这256种颜色是从1670w色中选取的
        * 图片尺寸小需要的颜色数量自然就少
        * 可以节省存储空间
          * 它是通过**颜色表**来实现的
          * 实际图片的内容存储时一个像素点只需要一个字节而不是三个字节
      * 它只动图的第一张画面存储的是完整的内容,后续存储的是相对于前一张画面变化的内容
        * 视频文件也是这样的
    * 编码的两个重要指标
      * 要能还原出原始信息
      * 要尽量节省空间
    * psd
      * PhotoShop的**工程文件**,它里面存储了对这个图片所有操作
      * 包括操作记录,图层,图层的名字,文字,文字的字体
      * 这种文件往往特别大,一般都在100M以上
      * 这种文件肯定不会用在网页上
      * 浏览器就不认识这种格式的图片文件
    * webp
      * 相对来讲比较新的格式,由谷歌发明
      * 有损压缩
      * 比jpg效果要好:
        * 同一张图片,文件大小相同,webp画质更好
        * 同一张图片,画质相同,webp文件更小
      * 支持透明
  * 文本文件与二进制文件
    * txt, py, js, html, c, java, cpp, css, log, ini,
  * 文件原始内容的查看
    * WinHex
    * Binary Viewer
    * xxd命令


* 命令行（Command Line）
  * 不同系统命令行的区别
    * windows(CMD,PowerShell)
    * linux/mac/wsl(bash,zsh)
    * 安卓 / Termux (bash,zsh)
  * 不要恐惧命令行，其实只是软件的展示形式不一样
    * 其实命令行里有各种各样的软件
      * 工具软件
        * 编辑器（vi）
        * 磁盘空间分析（ncdu,df）
        * 聊天（weechat）
        * 流量监控（nload）
        * 任务管理器（htop）
        * 多窗口（tmux）
        * 下载工具（curl,wget）
        * 版本管理（git）
        * 文件哈希/指纹计算（md5，sha1等）
      * 游戏
        * nudoku数独
        * pacman吃豆人
        * npush推箱子
        * sssnake贪吃蛇
        * 2048
        * tetris俄罗斯广场
      * 搞怪软件等
        * sl 小火车
        * cmatrix 黑客帝国数字雨
        * cbonsai -S 画盆景
        * pipes.sh 画管道
  * 命令行的基本操作与理解
    * 两个**重要概念**
      * 当前工作目录
      * 路径列表
        * 当我们在命令行里输入一个ls命令时,其实它会去查找一个叫ls.exe(windows上)的程序并执行它,它不会在整个电脑里全局搜索,而是只在特定的一些文件夹内搜索
          * 这些特定的文件夹就叫做路径列表
    * 命令的选项/参数
      * -l --long
      * -h --help
      * -m --mode  -m autopilot
  * 常用命令
    * ls  list
      * 列出当前文件夹的内容
      * -l 详细信息
      * -h 给人看,文件大小会选择合适的单位,必须跟-l一起用
      * -a 显示所有文件夹,包括隐藏文件,其实就是以.开头的文件
    * cat
      * concatenate 拼接
      * 它接收多个文件名做为参数
      * 输出所有文件的内容
      * 当只接一个文件名做为参数时相当于显示这个文件的内容,一般就是这么用的
    * cp  copy
      * 复制一个文件
      * cp  a.txt  b.txt
    * mv   move
      * 移动一个文件
      * mv   a.txt   b.txt
      * mv  a.txt    文件夹1
    * rm   remove
      * 删除一个文件
      * 删除文件夹
        * rm -r 文件夹名称
          * -r 表示递归删除
    * mkdir
      * 创建文件夹
      * mkdir  文件夹名
    * rmdir
      * 删除文件夹
      * 它只能删除空文件夹
        * 非空就会报错,说文件非空,不给删
    * cd  change directory
      * 改变当前工作目录
      * 命令行的路径中,~一般代表用户主目录,类似于"我的文档"文件夹
      * 空着运行运行该命令是直接进入~文件夹
      * cd 相对路径   进入到相对路径所对应的文件夹中
        * 什么是相对路径
          * 即相对于某个基准文件夹的路径
          * 不以盘符或/开头就是相对路径,在命令行中一般就是相对于当前工作目录
            * 如何计算呢?
              * 直接把当前工作目录与该相对路径拼接,拼接时注意是拼接位置要增加一个斜杠
            * 注意绝对路径(以/开头)就不用拼了
          * 相对路径中有两个特殊符号
            * .. 表示上一层文件夹
            * .  表示当前文件夹
            * 在实际操作中,.直接删掉,..与其左边的项"中和/抵消"(当..左边没有项的时候,只删它自己)
    * pwd print working directory
      * 输出当前工作目录的完整路径
    * touch
      * 创建一个空文件
        * touch a.txt
      * 如果文件存在的话,更新文件的最后修改时间
    * echo
      * 输出内容
    * which
      * 可以告诉我们某个命令具体对应哪个文件
    * date
      * 查看日期
    * split
      * 把一个大文件给拆成多个小文件
    * exit
      * 退出命令行


  * 命令行快捷键
    * ctrl+L 清屏
      * clear命令也可以
    * ctrl+A 将光标移动到最前面
    * ctrl+E 将光标移动到最后面
    * ctrl+C 强行停止当前正在运行的命令
      * 能够对绝大多数命令行程序生效
    * ctrl+R 搜索命令历史
    * 按上下键可以切换最近输入过的命令是很重要
    * tab 自动补全
  * 报错

  * 几个运算符
  * 导向运算 |
  * 输出运算 >
  * 追加运算 >>

  * 命令行脚本文件
