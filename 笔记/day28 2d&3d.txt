* 2d&3d
  * 23d变换不影响布局
  * 它是在布局结束后对元素生成的图片进行变换
  * 如果元素因为变换移动走了，原位置是保留的，与其它元素重叠时，默认变换过的元素在上层，除非其它元素设置了z-index
  * 只能进行**线性变换**
    * 什么叫线性变换？
      * 把元素想象成一个弹性膜，那么膜的每个位置受到的力是一样的
      * 元素不可能被变了厚度
  * 变换使用一个单一属性进行
  * transform: 变换1 变换2 变换3；
  * 变换的原点（不动点）通过transform-origin: top left;属性设置
    * 默认为元素的中心点
    * 关于不动点的解释及扩展
  * 后续的变换是在前面变换的结果上进行的
    * 如果变换改变了元素的坐标系统，那么后续也是在这个被修改后的坐标系统变换
  * 23d变换的性能问题
    * 在可能的情况下,现代浏览浏览器都是使用显卡进行的变换，且由于变换不影响布局（则无需重新计算布局）
    * 所以性能比通过布局或定位实现的动画效果还要流畅
    * 另外由于布局不存在亚像素（小于一个像素）但图形变换存在，动画会更细腻
  * 支持的变换操作：
    * rotate(角度) 旋转
    * skewx/y() 倾斜
    * scale(),scalex/y() 缩放
    * translate(),translatex/y() 平移
    * matrix() 矩阵变换
  * 变换在执行缓动的时候,如果变换函数序列不一致,将直接从起点用最快的速度变到终点(实际上是两个矩阵变换之间进行缓动)
    * 但是当缓函数序列一致的时候,即方式和数量一致但参数不一致的时候
      * 或一方比另一方多,但前面的全是一样的变换方式
      * 变换是将所有这些函数一一对应进行缓动
  * 双向居中(绝对居中)方案总结
    * https://jsbin.com/nozojudete/3/edit?html,css,output
    * 双向居中方案中至少要有一个元素的某一个维度是不定宽或高的 或者是宽高在一定范围内修改时依然能居中,才能算是一个方案,没有最好的方案,只有最合适的
  * 建议:每行代码都写注释